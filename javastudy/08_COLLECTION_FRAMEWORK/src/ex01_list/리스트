List 인터페이스

1. 배열과 같이 목록을 관리하는 자료구조이다. 
2. 배열 대신 실무에서 주로 사용된다.
3. ArrayList 클래스
	1) 배열 대신 사용한다. 
	2) 참조가 빠르다. 데이터의 순회가 빠르다.
	3) 추가/삭제가 느리다. 데이터의 추가/삭제로 인한 오버헤드(부담)가 높다.  (데이터를 자주 수정해야 하는 경우 알맞지 않은 형식이다.)
4. LinkedList 클래스
	1) 연결 리스트이다.
	2) 참조가 느리다.
	3) 추가/삭제가 빠르다.

	LinkedList에서는 각 요소가 노드이다. 
	모든 노드는 다음에 내가 어떤 노드를 가지고 있는지 위치 정보를 가지고 있다. 한 노드와 다음 노드를 순서대로 인덱스를 붙여서 쓴다. 
	다만 데이터가 연속되어 있지 않기 때문에 참조가 느리고, 연속되어 있지 않기 때문에 오버헤드가 적고 추가/삭제가 빠르다. 
	
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

interface List {
	void a();
	void b();
}

ArrayList 클래스와 LinkedList 클래스는 사용법이 같다.
class ArrayList implements List {
	void a() { } // 반드시 있어야 한다. 인터페이스가 가지고 있는 추상 메소드를 반드시 구현해서 모양을 갖춰야 한다.
	void b() { } // 반드시 있어야 한다. 
}

class LinkedList implements List {
	void a() { } // 반드시 있어야 한다. 위와 동일
	void b() { } // 반드시 있어야 한다. 
}