interface MyService(부모)
 
	public void execute(HttpServletRequest request, HttpServletResponse response); // 추상 메소드(본문이 없는 메소드)
 	
 	
 	
class(model) (interface를 구현한 자식 클래스)
 	
 	@Override
 	public void execute(HttpServletRequest request, HttpServletResponse response) {
 	
 	}
 	
------------------------------------------------------------------------------------------

interface MyService {
	public void execute(HttpServletRequest request, HttpServletResponse response);
}
 
class Today implements MyService { 
	@Override
	public void execute(HttpServletRequest request, HttpServletResponse response) {
	}
}
class Now implements MyService { 
	@Override
	public void execute(HttpServletRequest request, HttpServletResponse response) {
	}
}
class Lotto implements MyService { 
	@Override
	public void execute(HttpServletRequest request, HttpServletResponse response) {
	}
}

-----------------------------------------------------------------------------------------

	Today today = new Today();
	Now now = new Now();
	Lotto lotto = new Lotto();
	
	// 인터페이스 : 인터페이스를 구현한 클래스의 타입(이 될 수 있다)
	// 예시 : List 인터페이스를 구현한 ArrayList 클래스
			  List<String> hobbies = new ArrayList<>();
			  
	하나의 인스턴스로 통일 가능하다.
	MyService service = new Today();
	MyService service = new Now();
	MyService service = new Lotto();	
	
-----------------------------------------------------------------------------------------
	
	인터페이스 도입 전
		switch(command) {
		case "today.do": 
			Today today = new Today();
			today.execute(request, response); 
			break;
			
		case "now.do":
			Now now = new Now();
			now.execute(request, response);
			break;
			
		case "lotto.do":
			Lotto lotto = new Lotto();
			lotto.execute(request, response);
			break;
		}
	
	인터페이스 도입 후
		MyService service = null;
		switch(command) {
		case "today.do": 
			service = new Today();
			break;
		case "now.do":
			service = new Now();
			break;
		case "lotto.do":
			service = new Lotto();
			break;
		}
		service.execute(request, response);
