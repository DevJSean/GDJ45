spring initializr
project - maven project
language - java
spring boot - 2.6.8
project metadata - group - com.goodee
		   artifact - ex02
		   name - ex02
		   packaging - jar (jar를 선택하면 jsp를 사용하지 않겠다는 뜻)
		   java - 11
dependencies - spring web(web server에 web concainer 기능을 추가한 WAS(tomcat), jackson, spring core...)
	     - lombok
	     - oracle driver
	     - mybatis framework
	     - thymeleaf(controller의 return 값들(index.jsp ...)을 html로 인식하게 해준다(index.html ...))

-------------------------------------------------------------------------
jsp를 사용하지 않기 때문에 ServletInitializer.java가 없다.
pom.xml에서 packaging이 없다.
jsp를 사용하지 않기 때문에 pom.xml에서 tomcat-embed-jasper, jstl이 필요 없다.

-------------------------------------------------------------------------
application.properties
jsp를 사용하지 않기 때문에 servlet-context.xml 내용만 없고 ex01과 동일하다.

-------------------------------------------------------------------------
static resource 정적 자원
css, js, sql, images 등의 정적 자원들은
src/main/resources의 static 폴더에 보관한다.

<thymeleaf를 쓸 때는 resources의 static 폴더가 정적 자원의 기본 위치이다>

-------------------------------------------------------------------------
templates

web container(webapp) 만들 필요 없이
src/main/resources templates 폴더에 html을 보관한다.

<thymeleaf를 쓸 때는 resources의 templates 폴더가 .html의 기본 위치이다>

-------------------------------------------------------------------------
pom.xml
	commons-io 추가
	commons-fileupload 추가
	thumbnailator 추가 

-------------------------------------------------------------------------
기본 작업(java)은 springstudy 14_gallery에서 복사해온 상황
src/main/resources/templates

index.html
	<html xmlns:th="http://www.thymeleaf.org">

	jsp에서 쓰던 방법 : <a href="${contextPath}/board/noticeList">공지사항</a>

	<!-- Link URL Expressions : @{...}  타임리프 사용할 때 URL 이동하는 방법 --> 
	thymeleaf(html) 방법 : <a th:href="@{/gallery/list}">갤러리</a>

-------------------------------------------------------------------------
src/main/resources/templates/gallery

list.html
	
	외부 css 가지고 오는 법
	<link rel="stylesheet" th:href="@{/css/list.css}">  기본 위치가 static으로 잡혀있어서 바로 /css를 적으면 된다.
	
	jsp  -> expression language
	html -> value expression
	표기법은 같다   ${}
	사용법은 다르다 <td th:text="${변수값}"></td>

	반복문 사용
	<tr th:each="변수,인덱스사용할변수:배열"></tr>
	<tr th:each="gallery,rowStat:${galleries}">
		<td th:text="${beginNo - rowStat.index}"></td>
		<!-- 파라미터 보낼 때 방법이 다르다. ?가 아닌 () 사용 -->
		<td><a th:href="@{/gallery/detail(galleryNo=${gallery.galleryNo})}" th:text="${gallery.title}" ></a></td>
		<td th:text="${gallery.writer}"></td>
		<td th:text="${gallery.hit}"></td>
		<td th:text="${#dates.format(gallery.created,'yyyy-MM-dd HH:mm:ss')}"></td>
		<!-- 
			Calendar 타입 : ${#calendars.format(날짜, '형식')}
			Date 타입     : ${#dates.format(날짜, '형식')}
			String 타입   : ${#temporals.format(날짜, '형식')}
			'형식'은 SimpleDateFormat의 pattern 작성법을 따른다.
		-->
	</tr>

	HTML 태극가 포함된 텍스트 넣기
	<tr>
		<!-- th:utext="HTML태그가 포함된 텍스트" -->
		<td colspan="5" th:utext="${paging}"></td>
	</tr>

-------------------------------------------------------------------------
save.html

	<input type="button" value="목록" th:onclick="|location.href='@{/gallery/list}'|"> <!-- thymeleaf || 방법이 더 편하다 -->
				     <!-- th:onclick="'location.href=\'' + @{/gallery/list} + '\''" -->		  


-------------------------------------------------------------------------
detail.html

	자바스크립트 내부에서 Thymeleaf 표현식 사용을 위해서
	<script th:inline="javascript"> 태그를 사용한다.

	자바스크립트 내부에서 Thymeleaf 표현식은 [[]]으로 묶어서 처리한다.
	location.href=[[@{/gallery/remove(galleryNo=${gallery.galleryNo})}]];

	<div th:text="|번호 ${gallery.galleryNo}|"></div>
	<div th:text="'작성자 ' + ${gallery.writer}"></div>
	<div th:text="|작성일 ${#dates.format(gallery.created,'yyyy-MM-dd a hh:mm:ss')}|"></div>
	<div th:text="|수정일 ${#dates.format(gallery.modified,'yyyy-MM-dd HH:mm:ss')}|"></div>
	<div>내용</div>	
	<div th:utext="${gallery.content}"></div>

	<div>첨부목록</div>
	<div th:each="fileAttach:${fileAttaches}">
		<a th:href="@{/gallery/download(fileAttachNo=${fileAttach.fileAttachNo})}" th:text="${fileAttach.origin}"></a>
	</div>

-------------------------------------------------------------------------
change.html

	${gallery.galleryNo}
	${object(객체).field(필드)}
	
	Selection Variable Expressions : *{...}
	객체(object)와 필드(field)를 분리해서 표시하는 방법
	th:object="${객체}"
	th:object="*{필드}"

	<form id="f" th:object="${gallery}" th:action="@{/gallery/change}" method="post" enctype="multipart/form-data">
		<div th:text="|번호 *{galleryNo}|"></div>
		<div th:text="|작성자 *{writer}|"></div>
		<div th:text="|작성일 *{created}|"></div>
		<div th:text="|수정일 *{modified}|"></div>
		<input type="hidden" name="galleryNo" th:field="*{galleryNo}">
		제목 <input type="text" name="title" id="title" th:field="*{title}"><br>
		내용 <input type="text" name="content" id="content" th:field="*{content}"><br>
		첨부 추가 <input type="file" name="files" id="files" multiple="multiple"><br><br>
		
		<button>수정 완료</button>
		<input type="button" value="목록" id="btnList">
	</form>
	
	<hr>
	
	<div>첨부목록 삭제</div>
	<div th:each="fileAttach:${fileAttaches}">
		<span th:text="${fileAttach.origin}"></span>
		<a th:href="@{/gallery/removeFileAttach(fileAttachNo=${fileAttach.fileAttachNo},galleryNo=${fileAttach.galleryNo})}">
			<i class="fa-solid fa-x"></i>
		</a>
		<br>
		<img th:attr="alt=${fileAttach.origin},src=@{/gallery/display(fileAttachNo=${fileAttach.fileAttachNo})},width=300px">
		<br>
	</div>

-------------------------------------------------------------------------
jar로 빌드하기

pom.xml
	<groupId>com.goodee</groupId>
	<artifactId>ex02</artifactId>
	<version>1.0.0</version>    버전을 수정한다.
	<name>ex02</name>
	<description>Demo project for Spring Boot</description>

프로젝트 우클릭 - run as - maven build...
Goals : package 작성 후 Run

workspace(springbootstudy)/ex02/target
ex02-1.0.0.jar, ex02-1.0.0.jar.original  생성됨.

-------------------------------------------------------------------------
cmd(windows) or powershell(linux)로 실행

0. 실행 전에 서버 포트 번호가 겹치므로 스프링 부트를 끈다.

1. 디렉토리 이동
cd C\gdj45\springbootstudy\ex02\target

2. 목록 확인
ls

3. jar 파일 실행
java -jar ex02-1.0.0.jar
cmd or powershell을 끄면 안 된다.

4. 크롬에서 접속 
localhost:9999

5. 서버 종료시킬 때
Ctrl + C


