학습순서 : 

1. ajax 이용해 객체, Map 처리하기
   member.jsp
   membercontroller
   memberService
   memberServiceImpl
   MemberDTO
   
2. 1번 연습
   Board 관련 

3. ajax 이용해 List 처리하기
   Product 관련

3. ajax 이용해 ResponseEntity 처리하기
---------------------------------------------------------------------------------------------------------------------------


 member.jsp                           <->   MemberController                        <-> (MemberService)MemberServiceImpl 
                                      <->   (root-context.xml)
 GET 방식 (파라미터 보내기)
$.ajax({                              <->   @Autowired (root-context.xml, MemberConfig.java)
 url: ${contextPath}/member/detail,   <->   private MemberService memberService;
 type: 'get',                         <->   @ResponseBody                // ajax의 url 부분의 매핑
 data: 'no=1',                        <->   @GetMapping(value="/member/detail", produces="application/json")                
 dataType: 'json',                    <->   public MemberDTO detail(@RequestParam(value="no") Long no) { 
 success: function(obj) {             <->       MemberDTO member = memberService.detail(no); // ajax의 data(파라미터)
  ...                                 <->       return member;  // ajax 요청인 경우 요청한 곳으로 값만 반환.
 }                                    <->   }  // jackson에 의해서 자동으로 member를 json으로 변환    
})                                    <->      // member -> {"id": "admin", "pw" : "123456"}

 POST 방식 (본문에 포함시키기)
$.ajax({                              <->   @Autowired (root-context.xml, MemberConfig.java)
  url: ${contextPath}/member/detail,  <->   private MemberService memberService;
  type: 'post',                       <->   @ResponseBody  
  data:  JSON.stringify({"no": 1}),   <->   @PostMapping(value="/member/detail", produces="application/json")  
  contentType: 'application/json',    <->   public MemberDTO detail(@RequestBody MemberDTO member) {   
  dataType: 'json',                   <->     MemberDTO member = memberService.detail(member.getNo());
  success: function(obj) { ... } })   <->     return member; }

///////////////////////////////////////////////
// JSP에서는 기능별로 클래스를 만들었다.     //
// Spring에서는 기능별로 메소드를 사용한다.  //
///////////////////////////////////////////////

1. member.jsp
ajax처리 작성
요청에 관한 프로퍼티 : url, type, data, contentType
응답 데이터에 관한 프로퍼티 : dataType, success, error 

2. MemberController
 컨트롤러는 언제나 Service 호출한다.
 그래서 Service를 field로 등록한다.
	
 DI를 사용 안 하는 경우
	private MemberService memberService;
	public MemberController(MemberService MemberService) {  // root-context.xml에 정의한 bean이 매개변수 BoardService boardService로 주입됩니다.
		super();
		this.memberService = memberService;
	}

 DI를 사용하는 경우
 root-context.xml에 등록한 Bean을 스프링이 가져오는 방법
 1) 필드 2) 생성자 3) setter 방식 중 
 1) 필드 주입 방식 사용
	@Autowired
	private MemberService memberService; // bean의 id와 이름을 맞춘다.


 ※  @RestController  Ajax 처리를 위한 컨트롤러 선언. 모든 메소드에 @ResponseBody 애너테이션을 자동으로 붙여준다.
 ※  초보자는 RestController 사용 지양
 ※  @ResponseBody   이 메소드의 반환은 JSP 이름이 아니라 값이다.
 ※  @GetMapping or @PostMapping
 ※  @RequestBody 애너테이션을 이용하면 요청의 본문에 포함된 데이터를 받을 수 있다.

3. MemberService.java  MemberServiceImpl.java

   인터페이스          구현체
   메소드 정의만       메소드 실제로 구현


