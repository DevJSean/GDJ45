member.jsp <-> MemberController <-> (MemberService)MemberServiceImpl 
                                <-> (root-context.xml)

          

Service 부분

// JSP에서는 기능별로 클래스를 만들었다.
// Spring에서는 기능별로 메소드를 사용한다.

1. member.jsp
ajax처리 작성
요청에 관한 프로퍼티 : url, type, data, contentType
응답 데이터에 관한 프로퍼티 : dataType, success, error 

2. MemberController
 컨트롤러는 언제나 Service 호출한다.
 그래서 Service를 field로 등록한다.
	
 DI를 사용 안 하는 경우
	private BoardService boardService;
	public BoardController(BoardService boardService) {  // root-context.xml에 정의한 bean이 매개변수 BoardService boardService로 주입됩니다.
		super();
		this.boardService = boardService;
	}

 DI를 사용하는 경우
 root-context.xml에 등록한 Bean을 스프링이 가져오는 방법
 1. 필드 2. 생성자 3. setter 방식 중 필드 주입 방식 사용
	@Autowired
	private BoardService boardService;


... 아직 정리 못함