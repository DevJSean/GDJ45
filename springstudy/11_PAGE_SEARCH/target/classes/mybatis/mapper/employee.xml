<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!--
	중요
	mapper namespace가 달라진다.
	notice.xml의 쿼리문을 호출할 NoticeMapper.java를 namespace로 작성한다.
-->
<mapper namespace="com.goodee.ex11.mapper.EmployeeMapper">

	<!-- 전체 레코드 갯수 -->
	<select id="selectEmployeeCount" resultType="int">
		SELECT COUNT(*)
		  FROM EMPLOYEES
	</select>

	<!-- BEGIN~END 사이 목록 반환 -->
	<select id="selectEmployees" parameterType="Map" resultType="Employee">
		SELECT A.*
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY E.HIRE_DATE DESC) AS RN, E.*, D.DEPARTMENT_NAME
		          FROM DEPARTMENTS D RIGHT JOIN EMPLOYEES E
		            ON D.DEPARTMENT_ID = E.DEPARTMENT_ID) A
         WHERE A.RN BETWEEN #{beginRecord} AND #{endRecord}
	</select>
	<!-- 
		RANK() / ROW_NUMBER() / ROWNUM 칼럼    dbstudy - 7일차3_인라인뷰
	
		나중에 입사한 사원을 리스트의 시작에 배치하기
		SELECT RANK() OVER(ORDER BY HIRE_DATE DESC) AS 순위, EMPLOYEE_ID, FIRST_NAME, HIRE_DATE
		  FROM EMPLOYEES;
		  
		BEGIN ~ END 사이의 사원만 가져오기
		SELECT A.순위, A.EMPLOYEE_ID, A.FIRST_NAME, A.HIRE_DATE
		  FROM (SELECT RANK() OVER(ORDER BY HIRE_DATE DESC) AS 순위, EMPLOYEE_ID, FIRST_NAME, HIRE_DATE
		          FROM EMPLOYEES) A
		 WHERE A.순위 BETWEEN 6 AND 10; 
		///////////////////////////////////////////////////////////////////////////////////////////////
		DEPARTMENT_NAME은 다른 테이블이라서 JOIN 해야한다.
		부서가 없는 사원이 한 명 있어서 RIGHT JOIN 했다.
		
		 SELECT A.RN, A.EMPLOYEE_ID, A.FIRST_NAME, A.LAST_NAME, A.EMAIL, A.PHONE_NUMBER, A.HIRE_DATE, A.JOB_ID, A.SALARY, A.COMMISSION_PCT, A.MANAGER_ID, A.DEPARTMENT_ID, A.DEPARTMENT_NAME
		   FROM (SELECT ROW_NUMBER() OVER(ORDER BY E.HIRE_DATE DESC) AS RN, E.*, D.DEPARTMENT_NAME
	  	           FROM DEPARTMENTS D, EMPLOYEES E
		          WHERE D.DEPARTMENT_ID(+) = E.DEPARTMENT_ID) A
		  WHERE A.RN BETWEEN 6 AND 10;
		        
		 SELECT A.RN, A.EMPLOYEE_ID, A.FIRST_NAME, A.LAST_NAME, A.EMAIL, A.PHONE_NUMBER, A.HIRE_DATE, A.JOB_ID, A.SALARY, A.COMMISSION_PCT, A.MANAGER_ID, A.DEPARTMENT_ID, A.DEPARTMENT_NAME
		   FROM (SELECT ROW_NUMBER() OVER(ORDER BY E.HIRE_DATE DESC) AS RN, E.*, D.DEPARTMENT_NAME
		           FROM DEPARTMENTS D RIGHT JOIN EMPLOYEES E
		             ON D.DEPARTMENT_ID = E.DEPARTMENT_ID) A
		  WHERE A.RN BETWEEN 6 AND 10;
	 -->
 
 	<!-- 검색된 레코드 갯수 -->
	<select id="selectFindCount" parameterType="Map" resultType="Integer">
		SELECT COUNT(*)
		  FROM EMPLOYEES
		<where>
			<choose>
		 		<when test="column == 'EMPLOYEE_ID'">${column} = TRIM(#{query})</when>
		 		<when test="column == 'FIRST_NAME'"> ${column} LIKE '%' || #{query} || '%'</when>
		 		<when test="column == 'HIRE_DATE'">${column} BETWEEN TO_DATE(#{begin}, 'YYYY-MM-DD') AND TO_DATE(#{end}, 'YYYY-MM-DD')</when>
		 		<when test="column == 'SALARY'">${column} BETWEEN #{begin} AND #{end}</when>
		 	</choose>
		</where> 
	</select>
 
 	<!-- 검색 -->
	<select id="selectFindList" parameterType="Map" resultType="Employee">
		SELECT A.*
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY E.HIRE_DATE DESC) AS RN, E.*, D.DEPARTMENT_NAME
		          FROM DEPARTMENTS D RIGHT JOIN EMPLOYEES E
		            ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
				<where>
					<choose>
				 		<when test="column == 'EMPLOYEE_ID'">${column} = TRIM(#{query})</when>
				 		<when test="column == 'FIRST_NAME'"> ${column} LIKE '%' || #{query} || '%'</when>
				 		<when test="column == 'HIRE_DATE'">${column} BETWEEN TO_DATE(#{begin}, 'YYYY-MM-DD') AND TO_DATE(#{end}, 'YYYY-MM-DD')</when>
		 				<when test="column == 'SALARY'">${column} BETWEEN #{begin} AND #{end}</when>
				 	</choose>
				</where>) A
         WHERE A.RN BETWEEN #{beginRecord} AND #{endRecord}
	</select>		<!-- mybatis 쿼리문에서 ${}는 앞 뒤로 따옴표가 붙지 않는다.)--><!-- TRIM은 사용자가 입력란에 공백 같은 것 넣었을까봐 넣음. -->
 					<!-- mybatis 쿼리문에서 #{}는 앞 뒤로 따옴표가 붙는다.)-->
 					<!-- '%'는 Oracle의 LIKE문에서 사용되는 것. -->
 					
	<!-- 자동완성 -->
	<select id="autoComplete" parameterType="Map" resultType="Employee">
		SELECT DISTINCT ${column}
		  FROM EMPLOYEES
		 WHERE ${column} LIKE #{query} || '%'
	</select>			
 					
 					
 					
 					
 					
 					
</mapper>